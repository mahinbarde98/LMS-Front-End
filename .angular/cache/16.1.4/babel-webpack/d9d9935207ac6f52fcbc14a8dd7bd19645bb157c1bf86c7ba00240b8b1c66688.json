{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class UserService {\n  constructor() {}\n  setRoles(role) {\n    localStorage.setItem('role', role);\n  }\n  getRoles() {\n    return localStorage.getItem('role');\n  }\n  setToken(jwtToken) {\n    localStorage.setItem('jwtToken', jwtToken);\n  }\n  getToken() {\n    return localStorage.getItem('jwtToken');\n  }\n  clear() {\n    localStorage.clear();\n  }\n  isLoggedIn() {\n    return this.getRoles() && this.getToken();\n  }\n  roleMatch(allowedRoles) {\n    let activeRole = allowedRoles;\n    let userRoles = this.getRoles();\n    if (userRoles === activeRole) {\n      console.log(allowedRoles);\n      return true;\n    }\n    return false;\n  }\n}\nUserService.ɵfac = function UserService_Factory(t) {\n  return new (t || UserService)();\n};\nUserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserService,\n  factory: UserService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["UserService","constructor","setRoles","role","localStorage","setItem","getRoles","getItem","setToken","jwtToken","getToken","clear","isLoggedIn","roleMatch","allowedRoles","activeRole","userRoles","console","log","factory","ɵfac","providedIn"],"sources":["C:\\Users\\2101814\\OneDrive - Cognizant\\Pictures\\Loan Management Front-End\\LoanManagementApp\\src\\app\\services\\user.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n\n  constructor() { }\n  public setRoles(role:any){\n    localStorage.setItem('role', role);\n  }\n\n  public getRoles():any {\n    return (localStorage.getItem('role'));\n  }\n\n  public setToken(jwtToken:any){\n    localStorage.setItem('jwtToken',jwtToken);\n  }\n  public getToken(): any {\n    return localStorage.getItem('jwtToken')  ;\n  }\n\n  public clear(){\n    localStorage.clear();\n  }\n\n  public isLoggedIn(){\n    return this.getRoles() && this.getToken();\n  }\n\n  public roleMatch(allowedRoles: any): boolean {\n\n    let activeRole = allowedRoles\n    let userRoles = this.getRoles();\n    if (userRoles === activeRole) {\n      console.log(allowedRoles);\n      return true\n    }\n\n    return false;\n\n  }\n}\n"],"mappings":";AAKA,OAAM,MAAOA,WAAW;EAEtBC,YAAA,GAAgB;EACTC,QAAQA,CAACC,IAAQ;IACtBC,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEF,IAAI,CAAC;EACpC;EAEOG,QAAQA,CAAA;IACb,OAAQF,YAAY,CAACG,OAAO,CAAC,MAAM,CAAC;EACtC;EAEOC,QAAQA,CAACC,QAAY;IAC1BL,YAAY,CAACC,OAAO,CAAC,UAAU,EAACI,QAAQ,CAAC;EAC3C;EACOC,QAAQA,CAAA;IACb,OAAON,YAAY,CAACG,OAAO,CAAC,UAAU,CAAC;EACzC;EAEOI,KAAKA,CAAA;IACVP,YAAY,CAACO,KAAK,EAAE;EACtB;EAEOC,UAAUA,CAAA;IACf,OAAO,IAAI,CAACN,QAAQ,EAAE,IAAI,IAAI,CAACI,QAAQ,EAAE;EAC3C;EAEOG,SAASA,CAACC,YAAiB;IAEhC,IAAIC,UAAU,GAAGD,YAAY;IAC7B,IAAIE,SAAS,GAAG,IAAI,CAACV,QAAQ,EAAE;IAC/B,IAAIU,SAAS,KAAKD,UAAU,EAAE;MAC5BE,OAAO,CAACC,GAAG,CAACJ,YAAY,CAAC;MACzB,OAAO,IAAI;;IAGb,OAAO,KAAK;EAEd;;AArCWd,WAAW,C;mBAAXA,WAAW;AAAA;AAAXA,WAAW,C;SAAXA,WAAW;EAAAmB,OAAA,EAAXnB,WAAW,CAAAoB,IAAA;EAAAC,UAAA,EAFV;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}